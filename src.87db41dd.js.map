{"version":3,"sources":["timer.js","index.js"],"names":["CountdownTimer","constructor","selector","targetDate","timerId","timer","document","querySelector","isActive","start","target","Date","setInterval","currentDate","now","diffTime","days","hours","mins","secs","getAllTimeComponents","changeLayout","stop","clearInterval","pad","timeValue","String","padStart","time","Math","floor","console","log","layoutSelector","textContent","input","resetBtn","addEventListener","launchCountdown","stopCountdown","new1","value"],"mappings":";AACmC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAApB,MAAMA,EACjBC,aAAY,SAAEC,EAAF,WAAYC,IACfA,KAAAA,WAAaA,EACbC,KAAAA,QAAU,KACVC,KAAAA,MAAQC,SAASC,cAAcL,GAC/BM,KAAAA,UAAS,EAElBC,QACQ,IAAkB,IAAlB,KAAKD,SAAqB,OAExBE,MAAAA,EAAS,IAAIC,KAAK,KAAKR,YACxBK,KAAAA,UAAW,EAEXJ,KAAAA,QAAUQ,YAAY,KACrBC,MAAAA,EAAcF,KAAKG,MACfC,EAAWL,EAASG,EACvBE,GAAAA,GAAU,EAAE,CAAQ,MAAA,KAAEC,EAAF,MAAQC,EAAR,KAAeC,EAAf,KAAqBC,GAASnB,EAAeoB,qBAAqBL,GACrFf,EAAeqB,aAAa,CAAEL,KAAAA,EAAMC,MAAAA,EAAOC,KAAAA,EAAMC,KAAAA,GAAQ,KAAKd,SAEvE,KAGHiB,OACIC,cAAc,KAAKnB,SACdI,KAAAA,UAAW,EAIbgB,WAAIC,GACAC,OAAAA,OAAOD,GAAWE,SAAS,EAAG,KAElCP,4BAAqBQ,GACtBZ,MAAAA,EAAOhB,EAAewB,IAAIK,KAAKC,MAAMF,EAAQ,QAC7CX,EAAQjB,EAAewB,IAAIK,KAAKC,MAAOF,EAAQ,MAAyB,OACxEV,EAAOlB,EAAewB,IAAIK,KAAKC,MAAOF,EAAQ,KAAoB,MAClET,EAAOnB,EAAewB,IAAIK,KAAKC,MAAOF,EAAQ,IAAc,MAE3D,OADPG,QAAQC,IAAI,CAAChB,KAAAA,EAAMC,MAAAA,EAAOC,KAAAA,EAAMC,KAAAA,IACzB,CAACH,KAAAA,EAAMC,MAAAA,EAAOC,KAAAA,EAAMC,KAAAA,GAGpBE,qBAAa,KAAEL,EAAF,MAAQC,EAAR,KAAeC,EAAf,KAAqBC,GAAQc,GACxBA,EAAe1B,cAAc,2BACrC2B,YAAclB,EACLiB,EAAe1B,cAAc,4BACrC2B,YAAcjB,EACPgB,EAAe1B,cAAc,2BACrC2B,YAAchB,EACNe,EAAe1B,cAAc,2BACrC2B,YAAYf,GAhDE,QAAA,QAAA;;ACkBlC,aAnBD,IAAA,EAAA,EAAA,QAAA,eAmBC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAjBD,MAAMgB,EAAQ7B,SAASC,cAAc,UAC/B6B,EAAS9B,SAASC,cAAc,UACtC4B,EAAME,iBAAiB,QAASC,GAChCF,EAASC,iBAAiB,QAASE,GAEnC,IAAIC,EAAM,IAAIxC,EAAJ,QAAmB,CACrBE,SAAU,WACVC,WAAYgC,EAAMM,QAG1B,SAASH,IACLE,EAAKrC,WAAWgC,EAAMM,MACxBD,EAAK/B,QAEP,SAAS8B,IACPC,EAAKlB,OACHa,EAAMM,MAAM","file":"src.87db41dd.js","sourceRoot":"../src","sourcesContent":["\nexport default class CountdownTimer{\n    constructor({ selector, targetDate } ) {\n        this.targetDate = targetDate;\n        this.timerId = null;\n        this.timer = document.querySelector(selector)\n        this.isActive=false\n    }\n    start() {\n        if (this.isActive === true) { return }\n        \n        const target = new Date(this.targetDate)\n        this.isActive = true\n        \n        this.timerId = setInterval(() => {\n        const currentDate = Date.now();\n            const diffTime = target - currentDate;\n            if(diffTime>=0){ const { days, hours, mins, secs } = CountdownTimer.getAllTimeComponents(diffTime);\n                CountdownTimer.changeLayout({ days, hours, mins, secs }, this.timer);\n            }\n    }, 500);\n    }\n\n    stop() {\n        clearInterval(this.timerId)\n        this.isActive = false\n        // const { days, hours, mins, secs }={0, 0, 0, 0}\n        // CountdownTimer.changeLayout({ days, hours, mins, secs }, this.timer)\n    }\n    static pad(timeValue) {\n        return String(timeValue).padStart(2, '0');\n    }\n    static getAllTimeComponents(time){\n    const days = CountdownTimer.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = CountdownTimer.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = CountdownTimer.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = CountdownTimer.pad(Math.floor((time % (1000 * 60)) / 1000));\n    console.log({days, hours, mins, secs});\n    return {days, hours, mins, secs}\n    }\n\n    static changeLayout({ days, hours, mins, secs }, layoutSelector) {\n        const daysSelector = layoutSelector.querySelector('span[data-value=\"days\"]')\n        daysSelector.textContent = days\n        const hoursSelector = layoutSelector.querySelector('span[data-value=\"hours\"]')\n        hoursSelector.textContent = hours\n        const minsSelector = layoutSelector.querySelector('span[data-value=\"mins\"]')\n        minsSelector.textContent = mins\n        const secsSelector = layoutSelector.querySelector('span[data-value=\"secs\"]')\n        secsSelector.textContent=secs\n    }\n}","import CountdownTimer from \"./timer.js\"\n\nconst input = document.querySelector('#start')\nconst resetBtn=document.querySelector('#reset')\ninput.addEventListener('input', launchCountdown)\nresetBtn.addEventListener('click', stopCountdown)\n\nlet new1= new CountdownTimer({\n        selector: '#timer-1',\n        targetDate: input.value,\n    });\n\nfunction launchCountdown() {\n    new1.targetDate=input.value\n  new1.start()\n}\nfunction stopCountdown() {\n  new1.stop()\n    input.value=''\n}\n\n"]}